package edu.ucdavis.fiehnlab.ms.carrot.core.workflow.sample.postprocessing

import org.scalatest.WordSpec

class DistributionTest extends WordSpec {

  "DistributionTest" should {

    "histogram" in {
      val data = Seq(162.60556, 161.14412, 188.17339, 391.4631, 204.23306, 215.11154, 211.4375, 210.59691, 214.04056, 291.2857, 470.0932, 440.5378, 500.05884, 265.37143, 266.81668, 312.6801, 193.4011, 183.14285, 189.49486, 150.06061, 159.06372, 768.60046, 799.6153, 383.78146, 328.85965, 250.08911, 256.4654, 224.30797, 330.26285, 243.00595, 860.01465, 1224.0404, 1163.879, 1147.1006, 1574.6272, 1266.6614, 1797.0361, 1149.4426, 927.70374, 1114.1622, 1828.18, 1878.4982, 3608.3706, 5146.5713, 7070.6455, 8162.1416, 12328.426, 14120.6875, 19064.395, 20452.664, 19727.469, 22476.482, 20158.012, 19225.873, 19336.63, 41668.633, 111807.625, 267158.16, 519314.47, 838318.1, 1114053.6, 1335819.5, 1508661.4, 1597254.1, 1634500.4, 1527063.5, 1348500.2, 1167624.1, 888977.3, 628287.1, 398612.47, 269871.75, 174820.1, 119110.95, 83869.25, 65217.863, 55505.72, 45389.2, 38488.21, 32284.17, 26575.95, 21199.41, 18962.508, 15151.717, 12970.208, 10661.21, 10081.0625, 9585.803, 7645.2954, 6608.366, 7303.6074, 5512.111, 4519.077, 4699.8154, 5119.164, 5390.54, 3568.2297, 3329.76, 2945.066, 2933.624, 2699.6667, 3161.84, 2528.5225, 2548.0457, 1576.0643, 2248.1733, 1818.7017, 1628.0173, 1889.8805, 2049.1257, 1845.6876, 1513.2893, 1288.8695, 1492.2467, 1196.1929, 1202.0264, 866.40234, 1289.6736, 1334.9435, 1123.6304, 1575.8916, 1395.4344, 971.3515, 2027.08, 1408.182, 1100.8209, 1220.6476, 930.4688, 825.0, 903.89795, 1067.5682, 905.8648, 998.5334, 477.56604, 850.9511, 854.02625, 705.14, 752.60803, 698.6475, 479.86798, 930.2417, 453.0032, 575.8148, 614.55884, 755.61365, 652.5964, 582.7509, 508.2738, 448.13623, 336.03348, 641.52094, 693.31537, 421.12766, 657.66705, 640.11786, 522.07666, 237.25952, 604.641, 670.9457, 661.37885, 327.10715, 465.97543, 344.07043, 517.96014, 516.29785, 464.91876, 434.00067, 432.7531, 604.7146, 327.7601, 430.4973, 453.87274, 401.3382, 369.32065, 495.14203, 493.40747, 550.04065, 699.6327, 436.37695, 535.87604, 201.02975, 471.53125, 199.04436, 418.49005, 331.49316, 458.25653, 367.688, 421.53836, 466.2403, 394.77823, 459.90244, 415.04034, 332.46255, 331.0007, 394.29507, 475.07663, 404.7128, 223.3486, 634.5563, 375.48782, 359.76923, 351.0572, 264.00363, 207.841, 382.3393, 347.8834, 288.39127, 329.26346, 196.48987, 228.57861, 248.12, 252.02626, 384.94196, 329.6934, 325.6275, 206.84314, 273.50574, 269.96, 262.0005, 283.74316, 319.7889, 242.0976, 280.00183, 324.5582, 244.55281, 346.44247, 369.03333, 349.74612, 237.72205, 346.28973, 212.3518, 205.91718, 240.1202, 263.03815, 244.38026, 234.675, 222.61986, 297.25, 447.34387, 280.26547, 401.74384, 317.18713, 197.15921, 181.38564, 432.85138, 310.32416, 231.4976, 258.05713, 198.76562, 338.23865, 211.63281, 221.41422, 209.00278, 535.666, 207.92563, 391.48026, 274.97305, 214.49019, 248.2672, 283.63724, 200.19032, 240.75757, 282.00833, 263.50446, 215.07713, 212.06618, 244.0315, 277.15384, 356.54752, 346.10226, 212.16911, 227.50574, 245.77055, 249.84816, 223.0008, 304.6859, 227.52632, 240.5329, 228.9776, 286.2269, 226.0052, 232.40237, 225.5295, 225.35565, 264.00348, 275.8532, 273.33963, 334.45142, 288.5432, 272.04395, 270.91666, 203.73373, 193.169, 259.0011, 313.52274, 283.17307, 166.17046, 224.01404, 199.12076, 230.88043, 273.82324, 291.44897, 300.1392, 294.0052, 160.125, 213.46976, 130.0, 196.6012, 235.9, 130.61597, 188.0, 134.19565, 249.45795, 328.79062, 201.5062, 231.25455, 145.59274, 303.52274, 260.00067, 416.1154, 206.79623, 221.27162, 176.0702, 207.06667, 325.56927, 164.475, 277.4352, 207.32465, 203.01785, 337.05618, 284.67783, 317.24176, 262.96512, 251.01352, 262.1125, 219.85834, 207.77806, 205.63516, 267.78378, 397.013, 147.11185, 144.44643, 296.1565, 302.60165, 318.23676, 253.21469, 318.2978, 371.96924, 215.46538, 457.22266, 269.12247, 194.1228, 309.007, 212.02632, 217.36229, 231.75348, 208.35509)


      val h = Distribution(100, data.toList).histogram
      val noiseInts = h.map { it => (it.size, it) }.sortBy(-_._1).take(2)
      val summed = noiseInts.foldLeft((0, 0.0)) { case ((accA, accB), (a, b)) => (accA + a, accB + b.sum) }

      println(summed._2 / summed._1)
    }
  }
}
